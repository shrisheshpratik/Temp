import com.aspose.pdf.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;

import java.io.ByteArrayInputStream;
import java.util.Base64;

public class HtmlToPdfConverter {

    public static void applyHtmlStylesToTableCell(com.aspose.pdf.Document pdfDocument, String htmlContent, Cell cell) {
        // Parse HTML content with JSoup
        Document htmlDoc = Jsoup.parse(htmlContent);
        TextFragment textFragment = new TextFragment();
        parseElement(pdfDocument, htmlDoc.body(), textFragment);
        cell.getParagraphs().add(textFragment);
    }

    private static void parseElement(com.aspose.pdf.Document pdfDocument, Element element, TextFragment textFragment) {
        for (Node node : element.childNodes()) {
            if (node instanceof TextNode) {
                TextSegment segment = new TextSegment(((TextNode) node).text().replace("&nbsp;", " "));
                textFragment.getSegments().add(segment);
            } else if (node instanceof Element) {
                Element el = (Element) node;
                switch (el.tagName()) {
                    case "p":
                        parseElement(pdfDocument, el, textFragment);
                        textFragment.getSegments().add(new TextSegment("\n"));
                        break;
                    case "strong":
                        TextSegment boldSegment = new TextSegment(el.text());
                        boldSegment.getTextState().setFontStyle(FontStyles.Bold);
                        textFragment.getSegments().add(boldSegment);
                        break;
                    case "u":
                        TextSegment underlineSegment = new TextSegment(el.text());
                        underlineSegment.getTextState().setUnderline(true);
                        textFragment.getSegments().add(underlineSegment);
                        break;
                    case "i":
                        TextSegment italicSegment = new TextSegment(el.text());
                        italicSegment.getTextState().setFontStyle(FontStyles.Italic);
                        textFragment.getSegments().add(italicSegment);
                        break;
                    case "ul":
                        parseList(pdfDocument, el, textFragment, false);
                        break;
                    case "ol":
                        parseList(pdfDocument, el, textFragment, true);
                        break;
                    case "li":
                        textFragment.getSegments().add(new TextSegment("\n• ")); // bullet point for unordered list
                        parseElement(pdfDocument, el, textFragment);
                        break;
                    case "img":
                        String src = el.attr("src");
                        addBase64ImageToPdf(pdfDocument, src, textFragment);
                        break;
                    default:
                        parseElement(pdfDocument, el, textFragment);
                }
            }
        }
    }

    private static void parseList(com.aspose.pdf.Document pdfDocument, Element element, TextFragment textFragment, boolean isOrdered) {
        int counter = 1;
        for (Element item : element.children()) {
            if (item.tagName().equals("li")) {
                if (isOrdered) {
                    textFragment.getSegments().add(new TextSegment("\n" + counter + ". "));
                    counter++;
                } else {
                    textFragment.getSegments().add(new TextSegment("\n• "));
                }
                parseElement(pdfDocument, item, textFragment);
            }
        }
    }

    private static void addBase64ImageToPdf(com.aspose.pdf.Document pdfDocument, String src, TextFragment textFragment) {
        if (src.startsWith("data:image/")) {
            int base64Index = src.indexOf("base64,") + 7;
            String base64Data = src.substring(base64Index);
            byte[] imageBytes = Base64.getDecoder().decode(base64Data);

            // Create an image stream
            ByteArrayInputStream imageStream = new ByteArrayInputStream(imageBytes);

            // Add the image to the document
            Image image = new Image();
            image.setImageStream(imageStream);

            // You might need to add the image to the PDF document before adding it to the text fragment
            Page page = pdfDocument.getPages().get_Item(1); // Assuming adding to the first page, adjust as needed
            page.getParagraphs().add(image);

            // Add a placeholder for the image in the text fragment
            textFragment.getSegments().add(new TextSegment("[Image]"));
        }
    }

    public static void main(String[] args) {
        com.aspose.pdf.Document pdfDocument = new com.aspose.pdf.Document();
        Page page = pdfDocument.getPages().add();

        // Create a table and add it to the page
        Table table = new Table();
        page.getParagraphs().add(table);

        // Add a row to the table
        Row row = table.getRows().add();

        // Add a cell to the row
        Cell cell = row.getCells().add();

        // HTML content to be added to the cell
        String htmlContent = "<p>This is a <strong>bold</strong>, <u>under
